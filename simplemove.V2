.PROGRAM simplemove()


	;grip.close = 99
	;grip.open = 100

	;SIGNAL -grip.open, grip.close

	CALL defvars()

	MOVE #orig
	BREAK

	;MOVE test_1
	;BREAK

	;MOVE HERE:TRANS(0,0,0,0,0,-90)

	MOVE #intermediate
	BREAK

	MOVE #close_to_feeder
	;MOVE #over_griphome_2
	BREAK

	MOVE #intermediate
	BREAK

	MOVE #orig
	BREAK


.END

.PROGRAM writenfs()

	;AUTO nfslun
	;nfslun = 27


	;ATTACH (lun, 4) "DISK"
	ATTACH (lun, 4) "NFS"
	CALL typeiostat("attaching", lun)

	;$fname = "xc:\oleksandr_vplus\test.dat"

	$fname = "alex_nfs.dat"

	FOPENW (lun) $fname
	CALL typeiostat("opening a file", lun)
	rnd = RANDOM
	WRITE (lun) $TIME(), rnd
	CALL typeiostat("writing attempt", lun)
	TYPE $TIME(), rnd, lun
	FCLOSE (lun)
	DETACH (lun)


.END

.PROGRAM checksig()

	SIGNAL -99, 100
	TYPE SIG(99), SIG(100)
	SIGNAL 99, -100
	TYPE SIG(99), SIG(100)

	TYPE SIG(3001), SIG(3002)
	SIGNAL 3001, -3002

.END

.PROGRAM typeiostat($op_string, lun)

	err_code = IOSTAT(lun)
	TYPE "After ", $op_string, ":", err_code
	IF err_code < 0 THEN
	    TYPE $ERROR(err_code)
	END

.END

.PROGRAM enable_air()

	IF SIG(8) == FALSE THEN
	    SIGNAL 8
	END
.END

.PROGRAM defvars()

	SET #orig = #PPOINT(0,-90,180,0,90,0)
	SET #intermediate = #PPOINT(-100,-90,180,0,90,0)
	SET #close_to_feeder = #PPOINT(-100,-54,185,0,50,0)
	SET over_griphome_1 = TRANS(167.9,-243.3,600,0,180,-90)	; to be further refined
	SET #over_griphome_2 = #PPOINT(-55.4,-121.9,219.6,0,90,-90)
	SET test_1 = TRANS(480,0,500,0,180,-90)

.END

.PROGRAM gripperop()

	CALL enable_air()
	CALL gripper_close()

	CALL gripper_open()

	;CALL disable_air()

.END

.PROGRAM disable_air()

	IF SIG(8) THEN
	    SIGNAL -8
	END

.END

.PROGRAM gripper_open()

	CALL enable_air()

	;TYPE SIG(99), SIG(-100)

	IF SIG(99) AND SIG(-100) THEN
	    SIGNAL -99, 100
	END

.END

.PROGRAM gripper_close()

	CALL enable_air()
	IF SIG(-99) AND SIG(100) THEN
	    SIGNAL 99, -100
	END

.END

.PROGRAM tcpcreateclient($ip, port, lun)
	ATTACH (lun, 4) "TCP"
	;CALL typeiostat("establishing TCP client LUN", lun)

	IF IOSTAT(lun) < 0 THEN
	    CALL tcpdestrclient(lun)
	END

	FOPEN (lun, 0) $ip, " /REMOTE_PORT", port, " /BUFFER_SIZE 1024"
	;CALL typeiostat("creating client socket", lun)

	IF IOSTAT(lun) < 0 THEN
	    CALL tcpdestrclient(lun)
	END
.END

.PROGRAM tcpdestrclient(lun)
	FCLOSE (lun)
	DETACH (lun)
	CALL typeiostat("destroying TCP client", lun)
.END

.PROGRAM tcpsend($ip, port, $msg)
	AUTO lun

	ATTACH (lun, 4) "TCP"
	FOPEN (lun, 0) $ip, " /REMOTE_PORT", port, " /BUFFER_SIZE 1024"

	WRITE (lun) $msg

	FCLOSE (lun)
	DETACH (lun)
.END

.PROGRAM tcptestsrv()

	AUTO do_wait, no_wait, handle, lun, repeat_loop

	do_wait = 0
	no_wait = 1

	ATTACH (lun, 4) "TCP"
	CALL typeiostat("establishing TCP server LUN", lun)

	FOPEN (lun, 16) "/LOCAL_PORT 1234 /CLIENTS 10 /BUFFER_SIZE 1024"
	CALL typeiostat("creating server socket", lun)

	repeat_loop = TRUE
	WHILE repeat_loop DO

	    WAIT
	    READ (lun, handle, do_wait) $input
	    status = IOSTAT(lun)
	    CASE status OF
	      VALUE 100:
		TYPE "Connection established"
	      VALUE 1:
		TYPE "Received message ", $input
	      VALUE 101:
		TYPE "Connection closed"
	    END

	    ;TYPE $input

	END


	FCLOSE (lun)
	DETACH (lun)
	CALL typeiostat("closing", lun)
.END

.PROGRAM tcptestclient()
	AUTO lun
	CALL defvars()
	CALL tcpcreateclient($ip_vbox, 8888, lun)
	;CALL tcpcreateclient("192.168.1.1", 8888, lun)
	CALL tcpdestrclient(lun)
.END

.LOCATIONS
.END

.REALS
.END

.DOUBLES
.END

.STRINGS
.END

