.PROGRAM lab2()
.END

.PROGRAM movez()

	ATTACH ()
	MOVE HERE:TRANS(0,0,5,0,0,0)
	BREAK


.END

.PROGRAM play()

	CALL initialize()

	MOVE #orig
	BREAK

	SPEED 80
	CALL create_array(delta_j[], -90, 60, 30, -90, 0, 0)
	CALL move_rel_joints(delta_j[])
	BREAK

	MOVE HERE:TRANS(40,-25,185,0,0,0)
	BREAK

	CALL create_array(delta_j[], 0, 0, 0, 0, 0, 1.5)
	CALL move_rel_joints(delta_j[])
	BREAK

	;MOVE HERE:TRANS(0,-25,0,0,0,0)
	;BREAK


.END

.PROGRAM defvars()

	SET #orig = #PPOINT(0,-90,180,0,90,0)

.END

.PROGRAM pspeed()

	TYPE SPEED(2)
.END

.PROGRAM demo_stringarr()

	AUTO $q[50]

	$q[0] = "Hello"
	$q[1] = "world"
	$q[2] = "!"

	FOR i = 0 TO 1
	    TYPE $q[i]
	END

.END

.PROGRAM demo_delim()


	AUTO $delim, $s, n_tokens

	CALL get_delimiter($delim)
	$s = "First"+$delim+"second"+$delim

	CALL split_string($s, $delim, $tokens[], n_tokens)

	TYPE "Number of tokens: ", n_tokens

	FOR i = 0 TO n_tokens-1
	    TYPE $tokens[i]
	END


.END

.PROGRAM softsignals()

	AUTO signal_ready
	signal_ready = 2007

	SIGNAL -signal_ready

.END

.PROGRAM playwithtime()

	AUTO ts
	ts = TIMER(3)

	TYPE "done:", $ENCODE(ts)


.END

.PROGRAM speeddemo()


	CALL initialize()

	MOVE #orig
	BREAK

	SPEED 80
	CALL create_array(delta_j[], -90, 60, 30, -90, 0, 0)
	CALL move_rel_joints(delta_j[])
	BREAK

	;MOVE HERE:TRANS(0,0,185,0,0,0)

	SPEED 100
	TYPE SPEED(2), SPEED(1)
	MOVE HERE:TRANS(0,0,-100,0,0,0)
	BREAK

	SPEED 50
	TYPE SPEED(2), SPEED(1)
	MOVE HERE:TRANS(0,0,-100,0,0,0)
	BREAK

	SPEED 25
	TYPE SPEED(2), SPEED(1)
	MOVE HERE:TRANS(0,0,-100,0,0,0)
	BREAK

	SPEED 5
	TYPE SPEED(2), SPEED(1)
	MOVE HERE:TRANS(0,0,-100,0,0,0)
	BREAK

	SPEED 5
	MOVE #orig
	BREAK

.END

.PROGRAM weird($myweirdvar, weird_out)

	TYPE "Input:", $myweirdvar
	weird_out = 3.14

.END

.PROGRAM weird_main()

	AUTO $myweirdvar
	$myweirdvar = "Weird"

	CALL weird("NTUU KPI rocks!", weird_out_val)

	TYPE $myweirdvar, weird_out_val
	;TYPE weird_out

.END

.PROGRAM test_cmd_signal()


	SIGNAL sig_new_cmd
	SIGNAL sig_cmd_done

.END

.PROGRAM smtdemo()

	AUTO angle, radius, center_x, center_y, here_pose, x, y

	TYPE "Starting"

	ATTACH ()

	SET #orig = #PPOINT(0,-90,180,0,90,0)
	SET good_focus = TRANS(-339.903,-506.159,152.396,-179.987,90.024,-178.534)

	CALL wait2001()
	SPEED 20
	MOVE #orig
	BREAK

	; move_rel_tool
	CALL wait2001()
	SPEED 20
	MOVE HERE:TRANS(0,0,200,0,0,0)
	BREAK

	CALL wait2001()
	SPEED 20
	MOVE good_focus
	BREAK

	HERE here_pose

	radius = 20
	FOR angle = 0 TO 360 STEP 1
	    x = radius*COS(angle)+0
	    y = radius*SIN(angle)+0
	    SPEED 5
	    MOVE here_pose:TRANS(x,y,0,0,0,0)
	END

	MOVE here_pose

	TYPE "Done"


.END

.PROGRAM wait2001()

	TYPE "Waiting for signal 2001"


	WHILE NOT SIG(2001) DO
	    WAIT
	END

	WHILE SIG(2001) DO
	    WAIT
	END

	TYPE "Moving"


.END

.PROGRAM bufsizesrv()

; Experimental server for studying effect of different message sizes


	AUTO handle
	AUTO lun
	AUTO input_len
	AUTO $input
	AUTO status

	ATTACH (lun, 4) "TCP"
	CALL typeiostat("establishing TCP server LUN", lun)

	FOPEN (lun, 16) "/LOCAL_PORT 1235 /CLIENTS 10 /BUFFER_SIZE 128"
	CALL typeiostat("creating server socket", lun)

	WHILE TRUE DO

	    READ (lun, handle, 0) $input

	    status = IOSTAT(lun)

	    CASE status OF

	      VALUE 100:

		TYPE "Connection established"

	      VALUE 1:
		TYPE "Received message ", $input

		input_len = LEN($input)

		TYPE "Length =", input_len
		WRITE (lun, handle) "done:", input_len

	      VALUE 101:

		TYPE "Connection closed"

	    END

	END
.END

